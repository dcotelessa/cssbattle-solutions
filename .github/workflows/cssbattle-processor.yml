name: Create or Update Solutions File for Daily CSSBattle
on:
  issues:
    types: [opened]

permissions:
  contents: write
  issues: write
  
jobs:
  process-solutions-file:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.title, '[CSSBattle]') || contains(github.event.issue.title, '[CSSBattle-UPDATE]')
    
    env:
      GIT_USER_EMAIL: ${{ secrets.GIT_USER_EMAIL }}
      GIT_USER_NAME: ${{ secrets.GIT_USER_NAME }}
    
    steps:
      - name: üîß Setup Environment
        run: |
          echo "üîç Workflow Trigger Analysis"
          echo "Issue title: '${{ github.event.issue.title }}'"
          echo "Issue number: ${{ github.event.issue.number }}"
          echo "Repository: ${{ github.repository }}"
          echo ""
          
          # Determine operation type
          if [[ "${{ github.event.issue.title }}" == *"[CSSBattle-UPDATE]"* ]]; then
            echo "OPERATION_TYPE=update" >> $GITHUB_ENV
            echo "‚úÖ Operation: UPDATE"
          else
            echo "OPERATION_TYPE=create" >> $GITHUB_ENV
            echo "‚úÖ Operation: CREATE"
          fi

      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: üõ†Ô∏è Install Dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y jq file
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          echo "‚úÖ Dependencies installed"

      - name: üìÑ Extract Issue Content
        run: |
          echo "üìÑ Extracting issue body..."
          
          # Save issue body safely
          cat > issue_body.txt << 'ISSUE_EOF'
          ${{ github.event.issue.body }}
          ISSUE_EOF
          
          # Validate content
          if [ ! -s issue_body.txt ]; then
            echo "‚ùå ERROR: Issue body is empty"
            exit 1
          fi
          
          echo "‚úÖ Issue content extracted ($(wc -l < issue_body.txt) lines)"
          
          # Show structure for debugging
          echo "üìã Issue sections found:"
          grep "^###" issue_body.txt || echo "No sections found"

      - name: üìÖ Parse Date
        run: |
          echo "üìÖ Parsing date from issue..."
          
          # Try multiple date formats
          DATE=""
          
          # Method 1: Month Day, Year (e.g., "Jun 9, 2025")
          DATE=$(grep -oE "(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec|January|February|March|April|May|June|July|August|September|October|November|December)[[:space:]]+[0-9]{1,2},[[:space:]]*[0-9]{4}" issue_body.txt | head -1)
          
          # Method 2: Numeric format (e.g., "6/9/2025")
          if [ -z "$DATE" ]; then
            DATE=$(grep -oE "[0-9]{1,2}/[0-9]{1,2}/[0-9]{4}" issue_body.txt | head -1)
          fi
          
          # Method 3: ISO format (e.g., "2025-06-09")
          if [ -z "$DATE" ]; then
            DATE=$(grep -oE "[0-9]{4}-[0-9]{2}-[0-9]{2}" issue_body.txt | head -1)
          fi
          
          if [ -z "$DATE" ]; then
            echo "‚ùå ERROR: No date found in issue"
            exit 1
          fi
          
          echo "üîç Raw date found: '$DATE'"
          
          # Convert to YYYY-MM-DD format
          if FORMATTED_DATE=$(date -d "$DATE" +%Y-%m-%d 2>/dev/null); then
            echo "FORMATTED_DATE=$FORMATTED_DATE" >> $GITHUB_ENV
            echo "‚úÖ Date parsed: $FORMATTED_DATE"
          else
            echo "‚ùå ERROR: Could not parse date: '$DATE'"
            exit 1
          fi

      - name: üé® Extract CSS Content
        run: |
          echo "üé® Extracting CSS content..."
          
          # Find CSS section
          CSS_START=$(grep -n "### CSS Solution" issue_body.txt | head -1 | cut -d: -f1)
          
          if [ -z "$CSS_START" ]; then
            echo "‚ùå ERROR: No CSS Solution section found"
            exit 1
          fi
          
          echo "üîç CSS section starts at line: $CSS_START"
          
          # Find next section
          CSS_END=$(tail -n +$((CSS_START + 1)) issue_body.txt | grep -n "^### " | head -1 | cut -d: -f1)
          
          if [ -n "$CSS_END" ]; then
            ACTUAL_END=$((CSS_START + CSS_END - 1))
            sed -n "$((CSS_START + 1)),$((ACTUAL_END - 1))p" issue_body.txt > css_raw.txt
          else
            tail -n +$((CSS_START + 1)) issue_body.txt > css_raw.txt
          fi
          
          # Clean CSS content
          sed -e '/^[[:space:]]*$/d' \
              -e '/^```css$/d' \
              -e '/^```$/d' \
              -e '/^### /d' \
              -e '/^- \[/d' \
              -e '/^\[x\]/d' \
              -e '/Confirmation/d' \
              css_raw.txt > css_content.txt
          
          if [ ! -s css_content.txt ]; then
            echo "‚ùå ERROR: No CSS content found after cleaning"
            exit 1
          fi
          
          # Count versions
          VERSION_COUNT=$(grep -c "---VERSION---" css_content.txt || echo 0)
          VERSION_COUNT=$((VERSION_COUNT + 1))
          echo "CSS_VERSION_COUNT=$VERSION_COUNT" >> $GITHUB_ENV
          
          echo "‚úÖ CSS extracted: $VERSION_COUNT version(s), $(wc -l < css_content.txt) lines"

      - name: üñºÔ∏è Find Images
        run: |
          echo "üñºÔ∏è Looking for images..."
          
          # Enhanced image URL extraction
          > image_urls.txt
          
          echo "üîç Searching for various image URL patterns..."
          
          # Pattern 1: Markdown image syntax ![alt](url)
          grep -oE '!\[[^\]]*\]\([^)]+\)' issue_body.txt | sed 's/!\[[^\]]*\](\([^)]*\))/\1/' >> image_urls.txt 2>/dev/null || true
          
          # Pattern 2: HTML img tags <img src="url">
          grep -oE '<img[^>]+src="[^"]*"' issue_body.txt | sed 's/.*src="\([^"]*\)".*/\1/' >> image_urls.txt 2>/dev/null || true
          
          # Pattern 3: GitHub user-images (most common)
          grep -oE 'https://user-images\.githubusercontent\.com/[^[:space:]")\]]+' issue_body.txt >> image_urls.txt 2>/dev/null || true
          
          # Pattern 4: GitHub assets URLs
          grep -oE 'https://github\.com/[^/]+/[^/]+/assets/[^[:space:]")\]]+' issue_body.txt >> image_urls.txt 2>/dev/null || true
          
          # Pattern 5: Any GitHub content URLs
          grep -oE 'https://[^[:space:]")\]]*\.githubusercontent\.com/[^[:space:]")\]]+' issue_body.txt >> image_urls.txt 2>/dev/null || true
          
          # Pattern 6: Direct image URLs with extensions
          grep -oE 'https://[^[:space:]")\]]+\.(png|jpg|jpeg|gif|webp|PNG|JPG|JPEG|GIF|WEBP)' issue_body.txt >> image_urls.txt 2>/dev/null || true
          
          # Show what we found (before deduplication)
          echo "üîç Raw URLs found:"
          cat image_urls.txt | head -10
          
          # Remove duplicates and filter valid URLs
          if [ -s image_urls.txt ]; then
            # Clean URLs and remove duplicates
            sort image_urls.txt | uniq | grep -E '^https://' | head -20 > image_urls_clean.txt 2>/dev/null || true
            mv image_urls_clean.txt image_urls.txt 2>/dev/null || true
            
            IMAGE_COUNT=$(wc -l < image_urls.txt 2>/dev/null || echo 0)
            echo "‚úÖ Found $IMAGE_COUNT unique image URL(s)"
            echo "IMAGE_COUNT=$IMAGE_COUNT" >> $GITHUB_ENV
            
            # Show final URLs
            if [ "$IMAGE_COUNT" -gt 0 ]; then
              echo "üìã Final image URLs:"
              cat image_urls.txt
            fi
          else
            echo "‚ÑπÔ∏è No images found in issue"
            echo "IMAGE_COUNT=0" >> $GITHUB_ENV
          fi
          
          # Debug: Show markdown image syntax found
          echo "üîç Markdown images found:"
          grep -E '!\[[^\]]*\]\([^)]+\)' issue_body.txt || echo "No markdown images found"
          
          # Debug: Show HTML img tags found
          echo "üîç HTML img tags found:"
          grep -E '<img[^>]+src=' issue_body.txt || echo "No HTML img tags found"

      - name: üìÅ Create Directory Structure
        run: |
          echo "üìÅ Creating directory structure..."
          
          if [ -z "$FORMATTED_DATE" ]; then
            echo "‚ùå ERROR: FORMATTED_DATE not set!"
            echo "Available environment variables:"
            env | grep -E "(FORMATTED_DATE|CSS_VERSION_COUNT|IMAGE_COUNT)" || echo "None found"
            exit 1
          fi
          
          TARGET_DIR="daily-targets/$FORMATTED_DATE"
          mkdir -p "$TARGET_DIR"
          
          if [ ! -d "$TARGET_DIR" ]; then
            echo "‚ùå ERROR: Failed to create directory: $TARGET_DIR"
            exit 1
          fi
          
          echo "TARGET_DIR=$TARGET_DIR" >> $GITHUB_ENV
          echo "‚úÖ Created directory: $TARGET_DIR"
          
          # Verify directory exists
          ls -la "daily-targets/" || echo "daily-targets directory not found"
          ls -la "$TARGET_DIR" || echo "Target directory empty"

      - name: üìù Generate Solutions File
        run: |
          echo "üìù Generating solutions.html..."
          
          SOLUTIONS_FILE="$TARGET_DIR/solutions.html"
          
          # Start with Version 1
          echo "<!-- Version 1 -->" > "$SOLUTIONS_FILE"
          
          # Process CSS content
          version_num=1
          while IFS= read -r line || [ -n "$line" ]; do
            if [[ "$line" == "---VERSION---" ]]; then
              echo "</style>" >> "$SOLUTIONS_FILE"
              echo "" >> "$SOLUTIONS_FILE"
              version_num=$((version_num + 1))
              echo "<!-- Version $version_num -->" >> "$SOLUTIONS_FILE"
            else
              echo "$line" >> "$SOLUTIONS_FILE"
            fi
          done < css_content.txt
          
          # Ensure proper closing
          if ! tail -n1 "$SOLUTIONS_FILE" | grep -q "</style>"; then
            echo "</style>" >> "$SOLUTIONS_FILE"
          fi
          
          echo "‚úÖ Solutions file created with $CSS_VERSION_COUNT version(s)"

      - name: üñºÔ∏è Download Images
        run: |
          echo "üñºÔ∏è Processing images..."
          
          if [ "$IMAGE_COUNT" = "0" ]; then
            echo "‚ÑπÔ∏è No images found in issue body"
            echo "DOWNLOADED_COUNT=0" >> $GITHUB_ENV
          else
            echo "üñºÔ∏è Downloading $IMAGE_COUNT image(s)..."
            
            counter=1
            while IFS= read -r img_url; do
              if [ -n "$img_url" ]; then
                # Get file extension
                ext=$(echo "$img_url" | grep -oE '\.(png|jpg|jpeg|gif|webp)' | head -1)
                [ -z "$ext" ] && ext=".png"
                
                filename="target-${counter}-comparison${ext}"
                filepath="$TARGET_DIR/$filename"
                
                echo "üì• Downloading: $filename"
                echo "    URL: $img_url"
                
                # Simple download with timeout
                if curl -L -f -s --max-time 30 "$img_url" -o "$filepath" 2>/dev/null; then
                  if [ -s "$filepath" ]; then
                    echo "‚úÖ Downloaded: $filename ($(du -h "$filepath" | cut -f1))"
                    counter=$((counter + 1))
                  else
                    echo "‚ùå Downloaded file is empty: $filename"
                    rm -f "$filepath"
                  fi
                else
                  echo "‚ùå Failed to download: $img_url"
                fi
              fi
            done < image_urls.txt
            
            DOWNLOADED_COUNT=$((counter - 1))
            echo "DOWNLOADED_COUNT=$DOWNLOADED_COUNT" >> $GITHUB_ENV
            echo "‚úÖ Downloaded $DOWNLOADED_COUNT of $IMAGE_COUNT images"
          fi

      - name: üì± Generate LinkedIn Post
        run: |
          echo "üì± Generating LinkedIn post..."
          
          # Extract additional notes
          NOTES=$(sed -n '/### Additional Notes/,/### Confirmation/p' issue_body.txt | \
                  sed '/### Additional Notes/d; /### Confirmation/,$d; /^[[:space:]]*$/d; /^- \[/d' | \
                  head -3 | tr '\n' ' ' | xargs)
          
          # Use default if no notes found
          [ -z "$NOTES" ] && NOTES="Another CSS challenge completed! üéØ"
          
          # Generate post
          LINKEDIN_FILE="$TARGET_DIR/linkedin-post.md"
          SOLUTIONS_URL="https://github.com/${{ github.repository }}/blob/main/$TARGET_DIR/solutions.html"
          
          # Create LinkedIn post using echo (safer than heredoc)
          echo "# LinkedIn Post for $FORMATTED_DATE" > "$LINKEDIN_FILE"
          echo "" >> "$LINKEDIN_FILE"
          echo "---" >> "$LINKEDIN_FILE"
          echo "" >> "$LINKEDIN_FILE"
          echo "Today's CSSBattle solution:" >> "$LINKEDIN_FILE"
          echo "" >> "$LINKEDIN_FILE"
          echo "$NOTES" >> "$LINKEDIN_FILE"
          echo "" >> "$LINKEDIN_FILE"
          echo "$SOLUTIONS_URL" >> "$LINKEDIN_FILE"
          echo "" >> "$LINKEDIN_FILE"
          echo "(My journal notes.)" >> "$LINKEDIN_FILE"
          echo "" >> "$LINKEDIN_FILE"
          echo "#cssgang #CSS #CSSBattle #HTML" >> "$LINKEDIN_FILE"
          
          # Verify file was created
          if [ -f "$LINKEDIN_FILE" ]; then
            echo "‚úÖ LinkedIn post generated"
            echo "üìÑ Content preview:"
            head -5 "$LINKEDIN_FILE"
          else
            echo "‚ùå Failed to create LinkedIn post"
            exit 1
          fi

      - name: üîÑ Commit and Push Changes
        run: |
          echo "üîÑ Committing changes..."
          
          # Configure Git
          git config --local user.email "${GIT_USER_EMAIL:-${{ github.actor }}@users.noreply.github.com}"
          git config --local user.name "${GIT_USER_NAME:-${{ github.actor }}}"
          
          # Show what files exist
          echo "üìã Files in repository:"
          find . -name "*.html" -o -name "*.md" | grep daily-targets || echo "No daily-targets files found"
          
          # Add files
          git add .
          
          # Show what's staged
          echo "üìã Files staged for commit:"
          git diff --staged --name-only || echo "No files staged"
          
          # Check for changes
          if git diff --staged --quiet; then
            echo "‚ÑπÔ∏è No changes to commit"
            echo "HAS_CHANGES=false" >> $GITHUB_ENV
          else
            echo "üìù Changes detected, proceeding with commit..."
            
            # Show what will be committed
            git diff --staged --stat
            
            # Commit
            COMMIT_MSG="feat: CSS Battle solution for $FORMATTED_DATE"
            git commit -m "$COMMIT_MSG"
            
            # Push with retry
            for i in {1..3}; do
              if git push origin main; then
                echo "‚úÖ Changes pushed successfully"
                echo "HAS_CHANGES=true" >> $GITHUB_ENV
                break
              else
                echo "‚ùå Push attempt $i failed"
                [ $i -lt 3 ] && sleep 2
              fi
            done
            
            if [ "$i" = "3" ] && ! git push origin main; then
              echo "‚ùå All push attempts failed"
              echo "HAS_CHANGES=false" >> $GITHUB_ENV
            fi
          fi

      - name: ‚úÖ Create Success Comment
        if: env.HAS_CHANGES == 'true'
        run: |
          echo "‚úÖ Creating success comment..."
          
          # Calculate character count
          CHAR_COUNT=$(sed 's|</style>||g' css_content.txt | tr -d '\n' | wc -c)
          
          # Create comment using echo (safer than heredoc)
          cat > comment.txt << 'COMMENT_EOF'
# ‚úÖ CSS Battle Solution Processed Successfully!

## üìÅ Location
`$TARGET_DIR/`

## üìä Summary
- üéØ **CSS Versions:** $CSS_VERSION_COUNT
- üñºÔ∏è **Images Found:** ${IMAGE_COUNT:-0}
- üì• **Images Downloaded:** ${DOWNLOADED_COUNT:-0}
- ‚ö° **Character Count:** $CHAR_COUNT chars
- üìÖ **Date:** $FORMATTED_DATE

## üìÑ Files Created
- ‚úÖ `solutions.html` - Your CSS solution
- ‚úÖ `linkedin-post.md` - Ready-to-post content

## üîó Quick Links
- üíª **[View Solution](${{ github.server_url }}/${{ github.repository }}/blob/main/$TARGET_DIR/solutions.html)**
- üì± **[LinkedIn Post](${{ github.server_url }}/${{ github.repository }}/blob/main/$TARGET_DIR/linkedin-post.md)**
- üìÅ **[Full Directory](${{ github.server_url }}/${{ github.repository }}/tree/main/$TARGET_DIR)**

## üéâ Ready for Battle!
Your solution is organized and ready for sharing!

---
*‚ú® Processed by GitHub Actions*
COMMENT_EOF
          
          # Post comment and close issue
          gh issue comment "${{ github.event.issue.number }}" --body-file comment.txt
          gh issue close "${{ github.event.issue.number }}" --reason completed
          
          echo "‚úÖ Issue processed and closed"

      - name: üßπ Cleanup
        if: always()
        run: |
          echo "üßπ Cleaning up temporary files..."
          
          # Remove temporary files
          rm -f issue_body.txt css_raw.txt css_content.txt image_urls.txt comment.txt
          
          echo "‚úÖ Cleanup completed"
